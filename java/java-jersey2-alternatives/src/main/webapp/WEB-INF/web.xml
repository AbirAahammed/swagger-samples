<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

  <servlet>
    <servlet-name>jersey</servlet-name>
    <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
    <init-param>
      <param-name>jersey.config.server.wadl.disableWadl</param-name>
      <param-value>true</param-value>
    </init-param>
    <!-- adding 'io.swagger.v3.jaxrs2.integration.resources' is sufficent on it own to register the following paths:
    /openapi.json : OpenApi spec in json
    /openapi.yaml : OpenApi spec in yaml
    /openapi (Accept:  : "application/json" : OpenApi spec in json
    /openapi (Accept:  : "application/yaml" : OpenApi spec in yaml
    -->
    <init-param>
      <param-name>jersey.config.server.provider.packages</param-name>
      <param-value>
        io.swagger.v3.jaxrs2.integration.resources,io.swagger.sample.resource
      </param-value>
    </init-param>

    <!-- alternatively specify resources classes
    <init-param>
      <param-name>jersey.config.server.provider.classnames</param-name>

      <param-value>
        io.swagger.v3.jaxrs2.integration.resources.OpenApiResource,
        io.swagger.sample.resource.PetResource,
        io.swagger.sample.resource.UserResource
      </param-value>
    </init-param>
    -->
    <!-- alternatively specify config location
    <init-param>
      <param-name>openApi.configuration.location</param-name>
      <param-value>/openapi-configuration.json</param-value>
    </init-param>
    -->
    <!-- alternatively include a file openapi-configuration.json or openapi-configuration.yaml in classpath -->
    <!-- alternatively specify openApi.configuration.builder class implementing OpenApiConfigBuilder -->
    <!-- alternatively specify resource package
    <init-param>
      <param-name>openApi.configuration.resourcePackages</param-name>
      <param-value>com.fasterxml.jackson.jaxrs.json,io.swagger.sample.resource</param-value>
    </init-param>
    -->
    <!-- alternatively specify a custom application
    <init-param>
      <param-name>javax.ws.rs.Application</param-name>
      <param-value>io.swagger.sample.MyApplication</param-value>
    </init-param>
    -->
<load-on-startup>1</load-on-startup>
</servlet>

<servlet-mapping>
<servlet-name>jersey</servlet-name>
<url-pattern>/api/*</url-pattern>
</servlet-mapping>

<servlet>
<!-- use OpenApi servlet to serve spec -->
    <servlet-name>OpenApi</servlet-name>
    <servlet-class>io.swagger.v3.jaxrs2.integration.OpenApiServlet</servlet-class>

<!-- alternatively specify resource package
    <init-param>
      <param-name>openApi.configuration.resourcePackages</param-name>
      <param-value>com.fasterxml.jackson.jaxrs.json,io.swagger.sample.resource</param-value>
    </init-param>
-->
<!--
    <init-param>
      <param-name>openApi.configuration.location</param-name>
      <param-value>/openapi-configuration.json</param-value>
    </init-param>
-->
    <!-- alternatively include a file openapi-configuration.json or openapi-configuration.yaml in classpath -->

    <load-on-startup>2</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>OpenApi</servlet-name>
    <url-pattern>/openapi/*</url-pattern>
  </servlet-mapping>

  <servlet>
    <servlet-name>Bootstrap</servlet-name>
    <servlet-class>io.swagger.sample.Bootstrap</servlet-class>
    <load-on-startup>2</load-on-startup>
  </servlet>

  <filter>
    <filter-name>ApiOriginFilter</filter-name>
    <filter-class>io.swagger.sample.util.ApiOriginFilter</filter-class>
  </filter>

  <filter-mapping>
    <filter-name>ApiOriginFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
</web-app>
